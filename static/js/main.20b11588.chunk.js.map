{"version":3,"sources":["enc/crypt.js","gh/gh.js","Login/Login.js","App.js","reportWebVitals.js","index.js"],"names":["toBase64String","words","CryptoJS","enc","Base64","stringify","encryptData","input","key","secret_key","SHA256","iv","lib","WordArray","random","options","mode","CBC","body","AES","encrypt","concat","ciphertext","decryptData","packet","parse","start","length","end","create","slice","parsed_iv","decrypted","decrypt","Utf8","repository","branch","filePath","content","pat","message","accessToken","console","log","axios","get","headers","Authorization","refResponse","refSha","data","object","sha","latestCommitResponse","latestCommitSha","post","base_tree","tree","path","type","treeResponse","treeSha","parents","commitResponse","commitSha","patch","error","Login","SendPassword","useState","password","setPassword","className","value","onChange","target","name","onClick","App","text","setText","screen","setScreen","db","setDb","clearDb","setClearDb","loggedIn","setLoggedIn","encrptedData","setEncrptedData","decrptedData","setDecrptedData","useEffect","host","window","location","fetch","then","res","json","catch","err","switchScreen","handleClick","d2","handleSaveDbClick","commitFile","d1","style","backgroundColor","placeholder","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","document","getElementById","render","StrictMode"],"mappings":"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","file":"static/js/main.20b11588.chunk.js","sourcesContent":["import CryptoJS from \"crypto-js\";\n\n\nfunction toString(words){\n    return CryptoJS.enc.Utf8.stringify(words);\n}\n\nfunction toBase64String(words){\n    return CryptoJS.enc.Base64.stringify(words);\n}\n\nexport function encryptData(input, key){\n    var secret_key = CryptoJS.SHA256(key);\n    var iv = CryptoJS.lib.WordArray.random(16);\n    var options = {\n        iv: iv,\n        mode: CryptoJS.mode.CBC\n    }\n    var body = CryptoJS.AES.encrypt(input, secret_key, options);\n    iv.concat(body.ciphertext);\n    return toBase64String(iv);\n}\n\nexport function decryptData(input, key){\n    var packet = CryptoJS.enc.Base64.parse(input);\n\n    var secret_key = CryptoJS.SHA256(key);\n    var iv = CryptoJS.lib.WordArray.random(16);\n\n    var start = iv.words.length;\n    var end = packet.words.length;\n    \n    var ciphertext = CryptoJS.lib.WordArray.create(packet.words.slice(start, end));\n    var parsed_iv = CryptoJS.lib.WordArray.create(packet.words.slice(0, iv.words.length+1));\n    ciphertext = toBase64String(ciphertext);\n    var options = {\n        iv: parsed_iv,\n        mode: CryptoJS.mode.CBC\n    }\n    var decrypted = CryptoJS.AES.decrypt(ciphertext, secret_key, options);\n\n    return toString(decrypted);\n}","import axios from \"axios\";\n\n// const repository = \"user/repo\";\n// const branch = \"main\";\n// const filePath = \"file.txt\";\n// const content = Buffer.from(\"Hello World\").toString(\"base64\");\n// const message = \"Commit message\";\n// const accessToken = \"your_personal_access_token\";\n\nexport async function commitFile(repository, branch, filePath, content, pat) {\n    const message = \"Commit from Front End\";\n    const accessToken = pat;\n    console.log(\"AT\", accessToken);\n    try {\n    // Get reference SHA\n    const refResponse = await axios.get(\n        `https://api.github.com/repos/${repository}/git/refs/heads/${branch}`,\n        {\n            headers: {\n                Authorization: `Token ${accessToken}`\n            }\n        }\n    );\n    const refSha = refResponse.data.object.sha;\n\n    // Get latest commit SHA\n    const latestCommitResponse = await axios.get(\n        `https://api.github.com/repos/${repository}/commits/${refSha}`,\n        {\n        headers: {\n            Authorization: `Token ${accessToken}`\n        }\n        }\n    );\n    const latestCommitSha = latestCommitResponse.data.sha;\n\n    // Create new tree\n    const treeResponse = await axios.post(\n        `https://api.github.com/repos/${repository}/git/trees`,\n        {\n        base_tree: latestCommitSha,\n        tree: [\n            {\n            path: filePath,\n            mode: \"100644\",\n            type: \"blob\",\n            content: content\n            }\n        ]\n        },\n        {\n        headers: {\n            Authorization: `Token ${accessToken}`\n        }\n        }\n    );\n    const treeSha = treeResponse.data.sha;\n\n    // Create new commit\n    const commitResponse = await axios.post(\n        `https://api.github.com/repos/${repository}/git/commits`,\n        {\n        message: message,\n        tree: treeSha,\n        parents: [latestCommitSha]\n        },\n        {\n        headers: {\n            Authorization: `Token ${accessToken}`\n        }\n        }\n    );\n    const commitSha = commitResponse.data.sha;\n\n    // Update reference\n    await axios.patch(\n        `https://api.github.com/repos/${repository}/git/refs/heads/${branch}`,\n        {\n        sha: commitSha\n        },\n        {\n        headers: {\n            Authorization: `Token ${accessToken}`\n        }\n        }\n    );\n\n    console.log(\"File committed successfully!\");\n    } catch (error) {\n    console.error(error);\n}\n}\n\n","import { useState } from \"react\";\n\nfunction Login({SendPassword}) {\n    const [password, setPassword] = useState(\"\");\n\n    return (\n        <div className=\"card\">\n            <input\n                value={password}\n                onChange={({ target }) => {\n                    setPassword(target.value);\n                }}\n                name=\"password\"\n                type=\"text\"\n            />\n            \n            <button \n                className=\"btn submit-btn\" \n                onClick={() => SendPassword(password) }\n            >\n                Go\n            </button>\n        </div>\n    );\n}\n\nexport default Login;","import { useState, useEffect } from \"react\";\nimport {encryptData, decryptData} from \"./enc/crypt.js\"\nimport {commitFile} from \"./gh/gh.js\"\nimport Login from \"./Login/Login\"\n\n\nfunction App() {\n  const [text, setText] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n  const [screen, setScreen] = useState(\"encrypt\");\n  const [db, setDb] = useState(\"\");\n  const [clearDb, setClearDb] = useState(\"\");\n  const [loggedIn, setLoggedIn] = useState(\"false\");\n  const [encrptedData, setEncrptedData] = useState(\"\");\n  const [decrptedData, setDecrptedData] = useState(\"\");\n\n  const SendPassword = (data) => {\n    setPassword(data)\n    console.log(\"PASS\", password);\n    setLoggedIn(\"true\");\n    setScreen(\"edit\");\n  }\n\n  useEffect(() => {\n    const host = window.location.host;\n    const dbUrl = 'http://' + host + '/db.json';\n    fetch(dbUrl).then(\n\t\t  function (res) {\n\t\t\t  return res.json();\n\t\t  },\n    ).then(function (data) {\n      // store Data in State db Variable\n      setDb(data);\n    }).catch(\n      function (err) {\n        console.log(err, ' error');\n      },\n    );\n  }, []);\n\n  const switchScreen = (type) => {\n    setText(\"\");\n    setEncrptedData(\"\");\n    setDecrptedData(\"\");\n    setScreen(type);\n  };\n\n  const handleClick = () => {\n    if (!text) return;\n\n    if (screen === \"encrypt\") setEncrptedData(encryptData(text, password));\n    else { \n      setDecrptedData(decryptData(text, password));\n      console.log(\"RAW\", db);\n      console.log(\"XXXX\", decryptData(db.d2, password));\n    }\n  };\n\n  const handleSaveDbClick = () => {\n    console.log(\"clearDB\", clearDb);\n    db.d2 = encryptData(clearDb, password);\n    console.log(\"cipher\", db);\n    const repository = \"sandrolex/sandrolex.github.io\";\n    const branch = \"main\";\n    const filePath = \"/db.json\";\n    const content = db;\n    const pat = decryptData(db.d1, password);\n    commitFile(repository, branch, filePath, content, pat)\n  };\n\n  const editScreen = () => {\n    return (\n      <div className=\"card\">\n        <input\n          value={clearDb}\n          name=\"edit\"\n          type=\"text\"\n          onChange={({ target }) => {\n            setClearDb(target.value);\n          }}\n        />\n        <button className=\"btn submit-btn\" onClick={handleSaveDbClick}>\n            Save\n          </button>\n      </div>\n    )\n  }\n  const cryptScreen = () => {\n    return (\n      <div className=\"card\">\n          <input\n            value={text}\n            onChange={({ target }) => {\n              setText(target.value);\n            }}\n            name=\"text\"\n            type=\"text\"\n            placeholder={\n              screen === \"encrypt\" ? \"Enter Text\" : \"Enter Encrypted Data\"\n            }\n          />\n          <input\n            value={password}\n            onChange={({ target }) => {\n              setPassword(target.value);\n            }}\n            name=\"pass\"\n            type=\"text\"\n            placeholder=\"secret\"\n          />\n\n          <button className=\"btn submit-btn\" onClick={handleClick}>\n            {screen === \"encrypt\" ? \"Encrypt\" : \"Decrypt\"}\n          </button>\n        </div>\n\n    )\n  }\n\n  const frameScreen = () => {\n    return (\n      <div className=\"container\">\n        <div>\n          <button\n            className=\"btn btn-left\"\n            style={{\n              backgroundColor: screen === \"encrypt\" ? \"#5e35b1\" : \"#5e35b130\",\n            }}\n            onClick={() => {\n              switchScreen(\"encrypt\");\n            }}\n          >\n            Encrypt\n          </button>\n\n          <button\n            className=\"btn btn-right\"\n            style={{\n              backgroundColor: screen === \"decrypt\" ? \"#1e88e5\" : \"#1e88e530\",\n            }}\n            onClick={() => {\n              switchScreen(\"decrypt\");\n            }}\n          >\n            Decrypt\n          </button>\n          \n          <button\n            className=\"btn btn-right\"\n            style={{\n              backgroundColor: screen === \"edit\" ? \"#1e88e5\" : \"#1e88e530\",\n            }}\n            onClick={() => {\n              setClearDb(decryptData(db.d2, password));\n              switchScreen(\"edit\");\n            }}\n          >\n            Edit\n          </button>\n\n        </div>\n        {screen === \"edit\" ? editScreen() : cryptScreen()}\n        {encrptedData || decrptedData ? (\n          <div className=\"content\">\n            <label>{screen === \"encrypt\" ? \"Encrypted\" : \"Decrypted\"} Data</label>\n            <p>{screen === \"encrypt\" ? encrptedData : decrptedData}</p>\n          </div>\n        ) : null}\n      </div>\n    );\n    }\n    if (loggedIn === \"false\") {\n      return (\n        <Login SendPassword={SendPassword} />\n      )\n    } else {\n      return frameScreen();\n    }\n    \n      \n      \n    // return loggedIn ? <frameScreen /> : <Login/>\n      // if (loggedIn) {\n      //   frameScreen();\n      // } else {\n      //   Login();\n      // }\n}\n\nexport default App;\n\n\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}